////
/// Framework
/// Core framework functions for managing internal data / settings.
///
/// @group Framework
/// @author James Wigger <james.s.wigger@gmail.com>
////

/// Combines two maps together allowing non-destructive extension of properties
///
/// @param {map} $default - the default options map
/// @param {map} $extension - the extending properties map
/// @return {map} - a combined map of default and extension values
///
/// @example
///     $new-map: merge(('red': #F00), ('red': #F34036));
///
/// @since 1.0.0
@function merge($default, $extension) {
    @return map-merge($default, $extension);
}

/// Returns a rem value conversion for a pixel sizing
///
/// @param {number} $value - the pixel value to be converted
/// @return {number} - the rem conversion value
///
/// @example - scss Basic Usage
///     font-size: rem(32px)
///
/// @example - css Output
///     font-size: 2.25rem;
///
/// @access private
/// @since 1.0.0
@function rem($value) {
    @return ($value / 16) * 1rem;
}

/// Returns a unitless number
///
/// @param {number} $value - the value to be modified
///
/// @example - scss Basic Usage
///     font-size: strip-units(32px)
///
/// @example - css Output
///     font-size: 32;
///
/// @access private
/// @author Miriam Suzanne
/// @link http://stackoverflow.com/a/12335841
/// @since 1.0.0
@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

/// Converts a non-relative unit (px) to a relative one (rem)
///
/// @param {number} $value - the pixel value to be converted
/// @return {number} - the rem conversion value
///
/// @example - scss Basic Usage
///     font-size: px-to-relative(32px)
///
/// @example - css Output
///     font-size: 2.25rem;
///
/// @since 1.0.0
@function px-to-relative($value) {
    $unit: unit($value);
    $unitless-value: strip-units($value);

    @if($unit == 'px' OR unitless($value)) {
        @return rem($unitless-value);
    }

    @return $value;
}