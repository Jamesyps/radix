////
/// Mixins
////

/// Generates grid code for a containing element. Useful if users do not wish to use the CSS grid classes
/// in their markup.
///
/// @param {bool} $auto - Enables the auto-grid function where items will wrap
/// @param {bool} $center-x - Horizontally centers items
/// @param {bool} $center-y - Vertically center items
/// @param {bool} $flush -  Removes all spacing between items
/// @param {bool} $reverse - Reveres the order of the items
/// @param {bool} $stack - Display items in a column rather than horizontally
///
/// @example - scss Basic Usage
///     .grid-row
///        @include rdx-grid($auto: true);
///     }
///
/// @example - css Output
///     .grid-row
///        display: flex;
///        flex-wrap: wrap;
///        > * {
///            flex: none;
///        }
///     }
///
/// @group Grid
/// @outputs Outputs flexbox CSS properties for generating the Radix grid system
/// @since 1.0.0
@mixin rdx-grid($auto: false, $center-x: false, $center-y: false, $flush: false, $reverse: false, $stack: false) {
    display: flex;

    @if $auto {
        flex-wrap: wrap;

        > * {
            flex: none;
        }
    }

    @if $center-x {
        justify-content: center;
    }

    @if $center-y {
        align-items: center;
    }

    @if $flush {
        > * {
            margin: 0;
            padding: 0;
        }
    }

    @if $reverse {
        @if $stack {
            flex-direction: column-reverse;
        } @else {
            flex-direction: row-reverse;
        }
    }

    @if $stack {
        flex-direction: column;
    }
}

/// Sets the span width for an element not using the CSS grid classes
///
/// @example - scss Basic Usage
///     .grid-item {
///        @include rdx-span(4);
///     }
///
/// @example - css Output
///     .grid-item {
///        flex: 0;
///        width: 33.3333%;
///     }
///
/// @group Grid
/// @since 1.0.0
@mixin rdx-span($span) {
    flex: 0;
    width: column-width($span);
}

/// Sets the offset for an element not using the CSS grid classes
///
/// @example - scss Basic Usage
///     .grid-item {
///        @include rdx-offset(4);
///     }
///
/// @example - css Output
///     .grid-item {
///        margin-left: 33.3333%;
///     }
///
/// @group Grid
/// @since 1.0.0
@mixin rdx-offset($span) {
    margin-left: column-width($span);
}

/// Outputs a media query for sizes greater than the given breakpoint
///
/// @param {string} $key - the name of the breakpoint to use
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-from('md') {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 59em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-from($key) {
    @media screen and (min-width: breakpoint($key)) {
        @content;
    }
}

/// Outputs a media query for sizes up-to the the given breakpoint size
///
/// @param {string} $key - the name of the breakpoint to use
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-until('md') {
///        .item {
///            width: 100%;
///        }
///     }
///
/// @example - css Output
///     @media screen and (max-width: 58.99em) {
///        .item {
///            width: 100%;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-until($key) {
    @media screen and (max-width: breakpoint($key) - 0.01) {
        @content;
    }
}

/// Outputs a book-ended media query for targeting between two breakpoints
///
/// @param {string} $min - the name of the smaller breakpoint
/// @param {string} $max - the name of the larger breakpoint
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-between('sm', 'lg') {
///        .item {
///            background: red;
///        }
///     }
///
/// @example - css Output
///     @media screen and (max-width: 45em) and (max-width: 73em) {
///        .item {
///            background: red;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-between($min, $max) {
    @media screen and (min-width: breakpoint($min)) and (max-width: breakpoint($max)) {
        @content;
    }
}

/// Helper mixin for outputting the media query of largest breakpoint size
///
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-xl() {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 86em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-xl() {
    @include rdx-mq-from('xl') {
        @content;
    }
}

/// Helper mixin for outputting the media query up to the second-largest breakpoint size
///
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-lg() {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 73em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-lg() {
    @include rdx-mq-from('lg') {
        @content;
    }
}

/// Helper mixin for outputting the media query up to the medium breakpoint size
///
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-md() {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 59em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-md() {
    @include rdx-mq-from('md') {
        @content;
    }
}

/// Helper mixin for outputting the media query up to the smaller breakpoint size
///
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-sm() {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 45em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-sm() {
    @include rdx-mq-from('sm') {
        @content;
    }
}

/// Helper mixin for outputting the media query up to the smallest breakpoint size
///
/// @content the contents of the media query block
///
/// @example - scss Basic Usage
///     @include rdx-mq-xs() {
///        .item {
///            display: none;
///        }
///     }
///
/// @example - css Output
///     @media screen and (min-width: 34em) {
///        .item {
///            display: none;
///        }
///     }
///
/// @group Media Queries
/// @since 1.0.0
@mixin rdx-mq-xs() {
    @include rdx-mq-from('sm') {
        @content;
    }
}

/// Returns a font-size / line-height paring from system config by key
///
/// @param {string} $key [default] - the font-size key / label
///
/// @example - scss Basic Usage
///     .headline {
///        @include rdx-font-size('xl');
///     }
///
/// @example - css Output
///     .headline {
///        font-size: 3rem;
///        line-height: 3.25rem;
///     }
///
/// @group Fonts
/// @since 1.0.0
@mixin rdx-font-size($key: 'default') {
    font-size: font-size($key);
    line-height: line-height($key);
}

/// Returns a font-weight property
///
/// @param {string} $key [regular] - the font-weight key / label
///
/// @example - scss Basic Usage
///     .headline--thin {
///        @include rdx-font-weight('hairline');
///     }
///
/// @example - css Output
///     .headline--thin {
///        font-weight: 100;
///     }
///
/// @group Fonts
/// @since 1.0.0
@mixin rdx-font-weight($key: 'regular') {
    font-weight: font-weight($key);
}

/// Clears floats inside the element
///
/// @example - scss Basic Usage
///     .row {
///        @include clearfix();
///     }
///
/// @example - css Output
///     .row:after {
///        display: table;
///        clear: both;
///        content: ' ';
///     }
///
/// @group Layout
/// @since 1.0.0
@mixin rdx-clearfix() {
    &:after {
        display: table;
        clear: both;
        content: ' ';
    }
}

/// Horizontally centers an element on screen
///
/// @param {string} $position [relative] - the position property the element should use
///
/// @example - scss Basic Usage
///     .alert-box {
///        @include rdx-center-x();
///     }
///
/// @example - css Output
///     .alert-box {
///        position: relative;
///        left: 50%;
///        transform: translateX(-50%);
///     }
///
/// @group Layout
/// @since 1.0.0
@mixin rdx-center-x($position: 'relative') {
    position: $position;
    left: 50%;
    transform: translateX(-50%);
}

/// Vertically centers an element on screen
///
/// @param {string} $position [relative] - the position property the element should use
///
/// @example - scss Basic Usage
///     .alert-box {
///        @include rdx-center-y();
///     }
///
/// @example - css Output
///     .alert-box {
///        position: relative;
///        top: 50%;
///        transform: translateY(-50%);
///     }
///
/// @group Layout
/// @since 1.0.0
@mixin rdx-center-y($position: 'relative') {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}

/// Positions an element over the containing element
///
/// @param {string} $position [absolute] - the position property the element should use
/// @param {number} $offset [0] - the edge spacing of the overlaying element
///
/// @example - scss Basic Usage
///     .confirm-dialogue {
///        @include rdx-overlay();
///     }
///
/// @example - css Output
///     .confirm-dialogue {
///        position: absolute;
///        top: 0;
///        right: 0;
///        bottom: 0;
///        left: 0;
///     }
///
/// @group Layout
/// @since 1.0.0
@mixin rdx-overlay($position: 'absolute', $offset: 0) {
    position: $position;
    top: $offset;
    right: $offset;
    bottom: $offset;
    left: $offset;
}

/// Replaces the contents of an element with an image background
///
/// @param {string} $image - image path / object
/// @param {number} $width - width of the background image
/// @param {number} $height - height of the background image
///
/// @example - scss Basic Usage
///     .close-btn {
///        @include rdx-replace(url('../images/icons/close.png'), 16px, 16px);
///     }
///
/// @example - css Output
///     .close-btn {
///        display: block;
///        background: url('../images/icons/close.png') no-repeat 50% 50%;
///        background-size: 16px 16px;
///        width: 16px;
///        height: 16px;
///        text-indent: 100%;
///        white-space: no-wrap;
///        overflow: hidden;
///        outline: none;
///     }
///
/// @group Images
/// @since 1.0.0
@mixin rdx-replace($image, $width, $height) {
    display: block;

    background: $image no-repeat 50% 50%;
    background-size: $width $height;

    width: $width;
    height: $height;

    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
    outline: none;
}
