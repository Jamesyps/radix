////
/// Functions
/// @group Functions
/// @author James Wigger
////

/// Merge
/// Combines two maps together allowing non-destructive extension of properties
///
/// @param {map} $default - the default options map
/// @param {map} $extension - the extending properties map
/// @return {map} - a combined map of default and extension values
///
/// @access public
/// @since 1.0.0
@function merge($default, $extension) {
    @return map-merge($default, $extension);
}

/// Colour
/// Returns a colour value from the system colours map
///
/// @require {map} $radix-colours - the Radix colours map
/// @param {string} $key [default] - the key / label of the colour
/// @return {string} - a colour value for the key
///
/// @access public
/// @since 1.0.0
@function colour($key: 'default') {
    @if not map-has-key($radix-colours, $key) {
        @error 'No colour exists with the key: #{$key}';
    }

    @return map-get($radix-colours, $key);
}

/// Tint
/// Returns a tinted version of a colour (mixed with white)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {int} $percentage - the amount to mix the colours
/// @return {string} - a modified colour value for the key
///
/// @access public
/// @since 1.0.0
@function tint($key: 'default', $percentage: 25) {
    @return mix(#FFF, colour($key), $percentage);
}

/// Shade
/// Returns a shaded version of a colour (mixed with black)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {int} $percentage - the amount to mix the colours
/// @return {string} - a modified colour value for the key
///
/// @access public
/// @since 1.0.0
@function shade($key: 'default', $percentage: 25) {
    @return mix(#000, colour($key), $percentage);
}

/// Trans
/// Returns a transparent version of a colour (rgba)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {float} $amount - the opacity of the colour
/// @return {string} - a modified colour value for the key in rgba format
///
/// @access public
/// @since 1.0.0
@function trans($key: 'default', $amount: 0.5) {
    @return transparentize(colour($key), $amount);
}

/// Font Stack
/// Returns a font stack by key
///
/// @param {string} $key [default] - the key / label of the font stack
/// @return {map} - a map of the font stack
///
/// @access public
/// @since 1.0.0
@function font-stack($key: 'default') {
    @if not map-has-key($radix-font-stack, $key) {
        @error 'No font stack exists with the key: #{$key}';
    }

    @return map-get($radix-font-stack, $key);
}

/// Font Size
/// Returns a font-size by key
///
/// @param {string} $key [default] - the key / label of the font size group
/// @return {integer} - a rem value of the size
///
/// @access public
/// @since 1.0.0
@function font-size($key: 'default') {
    @if not map-has-key($radix-font-sizes, $key) {
        @error 'No font size exists with the key: #{$key}';
    }

    $font-size: nth(map-get($radix-font-sizes, $key), 1);

    @return rem($font-size);
}

/// Line height
/// Returns a line-height by key
///
/// @param {string} $key [default] - the key / label of the font size group
/// @return {integer} - a rem value of the line height
///
/// @access public
/// @since 1.0.0
@function line-height($key: 'default') {
    @if not map-has-key($radix-font-sizes, $key) {
        @error 'No font size exists with the key: #{$key}';
    }

    $line-height: nth(map-get($radix-font-sizes, $key), 2);

    @return rem($line-height);
}

/// Breakpoint
/// Returns a breakpoint by key
///
/// @param {string} $key - the key / label of the breakpoint
/// @return {string} - a width value
///
/// @access public
/// @since 1.0.0
@function breakpoint($key) {
    @if not map-has-key($radix-breakpoints, $key) {
        @error 'No breakpoint exists with the key: #{$key}';
    }

    @return map-get($radix-breakpoints, $key);
}

/// Column Width
/// Calculates the width value for a span of columns
///
/// @param {string} $span - the number of columns to span
/// @return {float} - a width value
///
/// @access public
/// @since 1.0.0
@function column-width($span) {
    @return ($span / $radix-gs-columns) * 100%;
}

/// Rem
/// Returns a rem value conversion for a pixel sizing
///
/// @param {float} $value - the pixel value to be converted
/// @return {float} - the rem conversion value
///
/// @access public
/// @since 1.0.0
@function rem($value) {
    $result: ($value / 16);

    @return #{$result}rem;
}