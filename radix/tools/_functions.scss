////
/// Functions
////

/// Merge
/// Combines two maps together allowing non-destructive extension of properties
///
/// @param {map} $default - the default options map
/// @param {map} $extension - the extending properties map
/// @return {map} - a combined map of default and extension values
///
/// @example
///     $new-map: merge(('red': #F00), ('red': #F34036));
///
/// @group Framework
/// @since 1.0.0
@function merge($default, $extension) {
    @return map-merge($default, $extension);
}

/// Colour
/// Returns a colour value from the system colours map
///
/// @require {map} $radix-colours - the Radix colours map
/// @param {string} $key [default] - the key / label of the colour
/// @return {string} - a colour value for the key
///
/// @example - scss Basic Usage
///     background-color: colour('primary');
///
/// @example - css Output
///     background-color: #3498DB;
///
/// @group Colours
/// @since 1.0.0
@function colour($key: 'default') {
    @if not map-has-key($radix-colours, $key) {
        @error 'No colour exists with the key: #{$key}';
    }

    @return map-get($radix-colours, $key);
}

/// Tint
/// Returns a tinted version of a colour (mixed with white)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {number} $percentage [25] - the amount to mix the colours
/// @return {string} - a modified colour value for the key
///
/// @example - scss Basic Usage
///     background-color: tint('primary');
///
/// @example - css Output
///     background-color: #67B2E4;
///
/// @group Colours
/// @since 1.0.0
@function tint($key: 'default', $percentage: 25) {
    @return mix(#FFF, colour($key), $percentage);
}

/// Shade
/// Returns a shaded version of a colour (mixed with black)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {number} $percentage [25] - the amount to mix the colours
/// @return {string} - a modified colour value for the key
///
/// @example - scss Basic Usage
///     background-color: shade('primary');
///
/// @example - css Output
///     background-color: #2772A4;
///
/// @group Colours
/// @since 1.0.0
@function shade($key: 'default', $percentage: 25) {
    @return mix(#000, colour($key), $percentage);
}

/// Trans
/// Returns a transparent version of a colour (rgba)
///
/// @param {string} $key [default] - the key / label of the colour
/// @param {number} $amount [0.5] - the opacity of the colour
/// @return {string} - a modified colour value for the key in rgba format
///
/// @example - scss Basic Usage
///     background-color: trans('primary');
///
/// @example - css Output
///     background-color: rgba(52, 152, 219, 0.5);
///
/// @group Colours
/// @since 1.0.0
@function trans($key: 'default', $amount: 0.5) {
    @return transparentize(colour($key), $amount);
}

/// Font Stack
/// Returns a font stack by key
///
/// @param {string} $key [default] - the key / label of the font stack
/// @return {list} - a list of the font-family values
///
/// @example - scss Basic Usage
///     font-family: font-stack('body');
///
/// @example - css Output
///     background-color: Hevetica, Arial, sans-serif;
///
/// @group Fonts
/// @since 1.0.0
@function font-stack($key: 'default') {
    @if not map-has-key($radix-font-stack, $key) {
        @error 'No font stack exists with the key: #{$key}';
    }

    @return map-get($radix-font-stack, $key);
}

/// Font Size
/// Returns a font-size by key
///
/// @param {string} $key [default] - the key / label of the font size group
/// @return {number} - a rem value of the size
///
/// @example - scss Basic Usage
///     font-size: font-size('xl');
///
/// @example - css Output
///     font-size: 3rem;
///
/// @group Fonts
/// @since 1.0.0
@function font-size($key: 'default') {
    @if not map-has-key($radix-font-sizes, $key) {
        @error 'No font size exists with the key: #{$key}';
    }

    $font-size: nth(map-get($radix-font-sizes, $key), 1);

    @return rem($font-size);
}

/// Font Weight
/// Returns a font weighting by key
///
/// @param {string} $key [regular] - the key / label of the font weight
/// @return {number} - the font weight value
///
/// @example - scss Basic Usage
///     font-weight: font-weight('semibold');
///
/// @example - css Output
///     font-weight: 600;
///
/// @group Fonts
/// @since 1.0.0
@function font-weight($key: 'regular') {
    @if not map-has-key($radix-font-weights, $key) {
        @error 'No font weighting exists with the key: #{$key}';
    }

    @return map-get($radix-font-weights, $key);
}

/// Line height
/// Returns a line-height by key
///
/// @param {string} $key [default] - the key / label of the font size group
/// @return {number} - a rem value of the line height
///
/// @example - scss Basic Usage
///     line-height: line-height('xl');
///
/// @example - css Output
///     line-height: 3.25rem;
///
/// @group Fonts
/// @since 1.0.0
@function line-height($key: 'default') {
    @if not map-has-key($radix-font-sizes, $key) {
        @error 'No font size exists with the key: #{$key}';
    }

    $line-height: nth(map-get($radix-font-sizes, $key), 2);

    @return rem($line-height);
}

/// Breakpoint
/// Returns a breakpoint by key
///
/// @param {string} $key - the key / label of the breakpoint
/// @return {number} - a width value
///
/// @example - scss Basic Usage
///     @media screen and (max-width: breakpoint('xl')) {
///        // ...
///     }
///
/// @example - css Output
///     @media screen and (max-width: 73em) {
///        // ...
///     }
///
/// @group Media Queries
/// @access private
/// @since 1.0.0
@function breakpoint($key) {
    @if not map-has-key($radix-breakpoints, $key) {
        @error 'No breakpoint exists with the key: #{$key}';
    }

    @return map-get($radix-breakpoints, $key);
}

/// Column Width
/// Calculates the width value for a span of columns
///
/// @param {string} $span - the number of columns to span
/// @return {number} - a width value
///
/// @example - scss Basic Usage
///     width: column-width(5);
///
/// @example - css Output
///     width: 41.66667%;
///
/// @group Grid
/// @access private
/// @since 1.0.0
@function column-width($span) {
    @return ($span / $radix-gs-columns) * 100%;
}

/// Rem
/// Returns a rem value conversion for a pixel sizing
///
/// @param {number} $value - the pixel value to be converted
/// @return {number} - the rem conversion value
///
/// @example - scss Basic Usage
///     font-size: rem(32px)
///
/// @example - css Output
///     font-size: 2.25rem;
///
/// @group Framework
/// @access private
/// @since 1.0.0
@function rem($value) {
    @return #{($value / 16)}rem;
}
